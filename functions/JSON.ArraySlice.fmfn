/**
 * 
 * Sort an array
 *
 * @param {array} array a valid JSON array
 * @param {integer} start item number to start at.  (1-based, NOT 0-based!)
 * @param {integer} numberOfValues how many array items to return.
 *
 * @returns {array}
 *
 * @module fm-json-additions
 * @see https://github.com/geistinteractive/fm-json-additions
 * 
 * @history  2017-05-13, steven.allen@rcconsulting.com, created
 *
 * ==============================
 */
Case (
	// Check if it's even trying to be an array.
	Left ( Trim ( array ) ; 1 ) <> "["
;		"? Invalid input; this function only accepts an array."

	// Check if it's valid JSON.
;	Let ( $check = JSONGetElement ( array ; 0 ) ; Left ( $check ; 1 ) = "?" )
;		$check

;	// OK, now we can actually proccess it.

	Let ([blank=""

	// Turn the array into something we can work with with List management functions already in FM.
	;	jsonValues		= JSONListValues ( array ; "" )

	// Now grab what we were actually looking for - the subset of array items we want.
	;	sliced			= MiddleValues ( jsonValues ; start ; numberOfValues )

	// But MiddleValues appends an extra return on the end that we need to nix before turning the list back into JSON.
	;	lastReturnStripped	= Replace ( sliced ; Length ( sliced ) ; 1 ; "" )    

	// Now we have to restore this to proper JSON that can be wrapped with the array brackets.
	;	putBackAsJSON		= "[" & Substitute ( lastReturnStripped ; "Â¶" ; "," ) & "]"
	];

	//wrapping in JSONGetElement to remove any lingering white space (h/t Todd Geist)
	JSONGetElement ( putBackAsJSON ; "" )

	)  //end let
) //end case
